#!/usr/bin/env python
# coding: utf-8

# In[13]:


import random
import datetime
from datetime import timedelta
from bson.objectid import ObjectId
import pandas as pd

from pymongo import MongoClient


# In[ ]:


# 2. Connect to MongoDB
# Replace the connection string with your actual MongoDB URI.
MONGODB_URI = "mongodb+srv://rvndudz77:yfEcQZxDD10zMX6L@cluster0.gfbng.mongodb.net/eventpro?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGODB_URI)
db = client.get_database()

events_collection = db.events
categories_collection = db.categories

# Hard-coded organizer ID (all events share this)
organizer_id = ObjectId("6776985e1324874860b8ca8d")

# 3. Load the Cleaned Data
# Replace 'final_eventbrite_data.xlsx' with your actual file name or CSV.
df = pd.read_excel('eventbrite_data_final_updated.xlsx')
df = df.sample(n=100, random_state=42)


# In[ ]:


# Columns in your file (already cleaned):
# event_name, description, date_time, venue, organizer, min_ticket_price,
# thumbnail_filename, country, city, category, page_number, url

# 4. Prepare a Category Lookup
# We'll query the 'categories' collection and store a map from category name to its _id.
category_map = {}
for cat_doc in categories_collection.find({}):
    # Example: cat_doc = { "_id": ObjectId(...), "name": "Business" }
    # Convert the category name to lowercase so we can do a case-insensitive match.
    category_map[cat_doc["name"].lower()] = cat_doc["_id"]

# 5. Transform Each Row to Match `events` Schema
documents = []

for idx, row in df.iterrows():
    # --- A) Generate random start/end date (ignoring row['date_time'])
    start_date = datetime.datetime.now() + timedelta(
        days=random.randint(0, 30),
        hours=random.randint(0, 23),
        minutes=random.randint(0, 59)
    )
    end_date = start_date + timedelta(hours=random.randint(1, 5))
    
    # --- B) Combine venue, city, country into one 'location' string
    venue_str = str(row['venue']) if not pd.isna(row['venue']) else ''
    city_str = str(row['city']) if not pd.isna(row['city']) else ''
    country_str = str(row['country']) if not pd.isna(row['country']) else ''
    location = ", ".join(part for part in [venue_str, city_str, country_str] if part.strip())
    
    # --- C) Convert min_ticket_price to string
    #       We assume your cleaned data has a numeric or zero for free events.
    price_val = row['min_ticket_price']
    # If it's free or zero, isFree = True; otherwise, False
    is_free = (price_val == 0 or price_val == 0.0)
    price_str = str(price_val)
    
    # --- D) Category lookup
    cat_name = str(row['category']).strip().lower()
    cat_name = cat_name.replace('-', ' ')
    category_id = category_map.get(cat_name)
    if not category_id:
        # If there's no matching category, skip or choose a default
        continue
    
    # --- E) Random ticket info
    max_tickets = random.randint(50, 200)
    tickets_sold = random.randint(0, max_tickets)
    
    # --- F) Build the document
    doc = {
        # _id is auto-generated by MongoDB
        "title": row['event_name'],
        "description": row['description'],
        "location": location,
        "imageUrl": row['url'],  # or row['thumbnail_filename'] if you have an actual image URL
        "startDateTime": start_date,
        "endDateTime": end_date,
        "price": price_str,  # store as string
        "isFree": is_free,
        "url": row['url'],
        "category": category_id,  # must be an ObjectId
        "organizer": organizer_id,  # your hard-coded ID
        "maximumTickets": str(max_tickets),
        "ticketsSoldCount": str(tickets_sold),
        "badges": [],  # empty array
        # __v is managed by Mongoose if you're using it, no need to set here
    }
    
    documents.append(doc)


# In[ ]:


if documents:
    result = events_collection.insert_many(documents)
    print(f"Inserted {len(result.inserted_ids)} documents into 'events' collection.")
else:
    print("No documents were inserted (possibly no matching categories?).")

